package com.example.zzj.geendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.zzj.entity.configuration;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONFIGURATION".
*/
public class configurationDao extends AbstractDao<configuration, Long> {

    public static final String TABLENAME = "CONFIGURATION";

    /**
     * Properties of entity configuration.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property No = new Property(0, Long.class, "no", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property Keym = new Property(2, String.class, "keym", false, "KEYM");
        public final static Property Valuem = new Property(3, String.class, "valuem", false, "VALUEM");
    };


    public configurationDao(DaoConfig config) {
        super(config);
    }
    
    public configurationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONFIGURATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: no
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"KEYM\" TEXT," + // 2: keym
                "\"VALUEM\" TEXT);"); // 3: valuem
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONFIGURATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, configuration entity) {
        stmt.clearBindings();
 
        Long no = entity.getNo();
        if (no != null) {
            stmt.bindLong(1, no);
        }
        stmt.bindLong(2, entity.getType());
 
        String keym = entity.getKeym();
        if (keym != null) {
            stmt.bindString(3, keym);
        }
 
        String valuem = entity.getValuem();
        if (valuem != null) {
            stmt.bindString(4, valuem);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, configuration entity) {
        stmt.clearBindings();
 
        Long no = entity.getNo();
        if (no != null) {
            stmt.bindLong(1, no);
        }
        stmt.bindLong(2, entity.getType());
 
        String keym = entity.getKeym();
        if (keym != null) {
            stmt.bindString(3, keym);
        }
 
        String valuem = entity.getValuem();
        if (valuem != null) {
            stmt.bindString(4, valuem);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public configuration readEntity(Cursor cursor, int offset) {
        configuration entity = new configuration( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // no
            cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // keym
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // valuem
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, configuration entity, int offset) {
        entity.setNo(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setKeym(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setValuem(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(configuration entity, long rowId) {
        entity.setNo(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(configuration entity) {
        if(entity != null) {
            return entity.getNo();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
