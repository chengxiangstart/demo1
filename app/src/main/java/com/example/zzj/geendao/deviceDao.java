package com.example.zzj.geendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.zzj.entity.device;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE".
*/
public class deviceDao extends AbstractDao<device, Long> {

    public static final String TABLENAME = "DEVICE";

    /**
     * Properties of entity device.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Dev_id = new Property(0, Long.class, "dev_id", true, "_id");
        public final static Property Unit_id = new Property(1, int.class, "unit_id", false, "UNIT_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Serial = new Property(3, String.class, "serial", false, "SERIAL");
        public final static Property Longitude = new Property(4, double.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(5, double.class, "latitude", false, "LATITUDE");
        public final static Property Time = new Property(6, int.class, "time", false, "TIME");
        public final static Property Note = new Property(7, String.class, "note", false, "NOTE");
        public final static Property Feature = new Property(8, String.class, "feature", false, "FEATURE");
        public final static Property Type = new Property(9, int.class, "type", false, "TYPE");
        public final static Property Media = new Property(10, int.class, "media", false, "MEDIA");
        public final static Property Plugm = new Property(11, String.class, "plugm", false, "PLUGM");
    };


    public deviceDao(DaoConfig config) {
        super(config);
    }
    
    public deviceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: dev_id
                "\"UNIT_ID\" INTEGER NOT NULL ," + // 1: unit_id
                "\"NAME\" TEXT," + // 2: name
                "\"SERIAL\" TEXT," + // 3: serial
                "\"LONGITUDE\" REAL NOT NULL ," + // 4: longitude
                "\"LATITUDE\" REAL NOT NULL ," + // 5: latitude
                "\"TIME\" INTEGER NOT NULL ," + // 6: time
                "\"NOTE\" TEXT," + // 7: note
                "\"FEATURE\" TEXT," + // 8: feature
                "\"TYPE\" INTEGER NOT NULL ," + // 9: type
                "\"MEDIA\" INTEGER NOT NULL ," + // 10: media
                "\"PLUGM\" TEXT);"); // 11: plugm
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, device entity) {
        stmt.clearBindings();
 
        Long dev_id = entity.getDev_id();
        if (dev_id != null) {
            stmt.bindLong(1, dev_id);
        }
        stmt.bindLong(2, entity.getUnit_id());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String serial = entity.getSerial();
        if (serial != null) {
            stmt.bindString(4, serial);
        }
        stmt.bindDouble(5, entity.getLongitude());
        stmt.bindDouble(6, entity.getLatitude());
        stmt.bindLong(7, entity.getTime());
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(8, note);
        }
 
        String feature = entity.getFeature();
        if (feature != null) {
            stmt.bindString(9, feature);
        }
        stmt.bindLong(10, entity.getType());
        stmt.bindLong(11, entity.getMedia());
 
        String plugm = entity.getPlugm();
        if (plugm != null) {
            stmt.bindString(12, plugm);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, device entity) {
        stmt.clearBindings();
 
        Long dev_id = entity.getDev_id();
        if (dev_id != null) {
            stmt.bindLong(1, dev_id);
        }
        stmt.bindLong(2, entity.getUnit_id());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String serial = entity.getSerial();
        if (serial != null) {
            stmt.bindString(4, serial);
        }
        stmt.bindDouble(5, entity.getLongitude());
        stmt.bindDouble(6, entity.getLatitude());
        stmt.bindLong(7, entity.getTime());
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(8, note);
        }
 
        String feature = entity.getFeature();
        if (feature != null) {
            stmt.bindString(9, feature);
        }
        stmt.bindLong(10, entity.getType());
        stmt.bindLong(11, entity.getMedia());
 
        String plugm = entity.getPlugm();
        if (plugm != null) {
            stmt.bindString(12, plugm);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public device readEntity(Cursor cursor, int offset) {
        device entity = new device( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // dev_id
            cursor.getInt(offset + 1), // unit_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // serial
            cursor.getDouble(offset + 4), // longitude
            cursor.getDouble(offset + 5), // latitude
            cursor.getInt(offset + 6), // time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // note
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // feature
            cursor.getInt(offset + 9), // type
            cursor.getInt(offset + 10), // media
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // plugm
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, device entity, int offset) {
        entity.setDev_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUnit_id(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSerial(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLongitude(cursor.getDouble(offset + 4));
        entity.setLatitude(cursor.getDouble(offset + 5));
        entity.setTime(cursor.getInt(offset + 6));
        entity.setNote(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFeature(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setType(cursor.getInt(offset + 9));
        entity.setMedia(cursor.getInt(offset + 10));
        entity.setPlugm(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(device entity, long rowId) {
        entity.setDev_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(device entity) {
        if(entity != null) {
            return entity.getDev_id();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
