package com.example.zzj.geendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.zzj.entity.userinfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USERINFO".
*/
public class userinfoDao extends AbstractDao<userinfo, Long> {

    public static final String TABLENAME = "USERINFO";

    /**
     * Properties of entity userinfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Person_id = new Property(0, Long.class, "person_id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Pass = new Property(2, String.class, "pass", false, "PASS");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property Timein = new Property(4, String.class, "timein", false, "TIMEIN");
        public final static Property Timeout = new Property(5, String.class, "timeout", false, "TIMEOUT");
    };


    public userinfoDao(DaoConfig config) {
        super(config);
    }
    
    public userinfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USERINFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: person_id
                "\"NAME\" TEXT," + // 1: name
                "\"PASS\" TEXT," + // 2: pass
                "\"TYPE\" INTEGER NOT NULL ," + // 3: type
                "\"TIMEIN\" TEXT," + // 4: timein
                "\"TIMEOUT\" TEXT);"); // 5: timeout
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USERINFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, userinfo entity) {
        stmt.clearBindings();
 
        Long person_id = entity.getPerson_id();
        if (person_id != null) {
            stmt.bindLong(1, person_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String pass = entity.getPass();
        if (pass != null) {
            stmt.bindString(3, pass);
        }
        stmt.bindLong(4, entity.getType());
 
        String timein = entity.getTimein();
        if (timein != null) {
            stmt.bindString(5, timein);
        }
 
        String timeout = entity.getTimeout();
        if (timeout != null) {
            stmt.bindString(6, timeout);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, userinfo entity) {
        stmt.clearBindings();
 
        Long person_id = entity.getPerson_id();
        if (person_id != null) {
            stmt.bindLong(1, person_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String pass = entity.getPass();
        if (pass != null) {
            stmt.bindString(3, pass);
        }
        stmt.bindLong(4, entity.getType());
 
        String timein = entity.getTimein();
        if (timein != null) {
            stmt.bindString(5, timein);
        }
 
        String timeout = entity.getTimeout();
        if (timeout != null) {
            stmt.bindString(6, timeout);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public userinfo readEntity(Cursor cursor, int offset) {
        userinfo entity = new userinfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // person_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pass
            cursor.getInt(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // timein
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // timeout
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, userinfo entity, int offset) {
        entity.setPerson_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPass(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setTimein(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTimeout(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(userinfo entity, long rowId) {
        entity.setPerson_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(userinfo entity) {
        if(entity != null) {
            return entity.getPerson_id();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
