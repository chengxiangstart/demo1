package com.example.zzj.geendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.zzj.entity.subunit;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUBUNIT".
*/
public class subunitDao extends AbstractDao<subunit, Long> {

    public static final String TABLENAME = "SUBUNIT";

    /**
     * Properties of entity subunit.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Unit_id = new Property(0, Long.class, "unit_id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Up_id = new Property(2, int.class, "up_id", false, "UP_ID");
        public final static Property State = new Property(3, int.class, "state", false, "STATE");
    };


    public subunitDao(DaoConfig config) {
        super(config);
    }
    
    public subunitDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUBUNIT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: unit_id
                "\"NAME\" TEXT," + // 1: name
                "\"UP_ID\" INTEGER NOT NULL ," + // 2: up_id
                "\"STATE\" INTEGER NOT NULL );"); // 3: state
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUBUNIT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, subunit entity) {
        stmt.clearBindings();
 
        Long unit_id = entity.getUnit_id();
        if (unit_id != null) {
            stmt.bindLong(1, unit_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getUp_id());
        stmt.bindLong(4, entity.getState());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, subunit entity) {
        stmt.clearBindings();
 
        Long unit_id = entity.getUnit_id();
        if (unit_id != null) {
            stmt.bindLong(1, unit_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getUp_id());
        stmt.bindLong(4, entity.getState());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public subunit readEntity(Cursor cursor, int offset) {
        subunit entity = new subunit( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // unit_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // up_id
            cursor.getInt(offset + 3) // state
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, subunit entity, int offset) {
        entity.setUnit_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUp_id(cursor.getInt(offset + 2));
        entity.setState(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(subunit entity, long rowId) {
        entity.setUnit_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(subunit entity) {
        if(entity != null) {
            return entity.getUnit_id();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
