package com.example.zzj.geendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.zzj.entity.dataattr;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATAATTR".
*/
public class dataattrDao extends AbstractDao<dataattr, Long> {

    public static final String TABLENAME = "DATAATTR";

    /**
     * Properties of entity dataattr.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Data_id = new Property(0, Long.class, "data_id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Class1 = new Property(2, int.class, "class1", false, "CLASS1");
        public final static Property Unit_id = new Property(3, int.class, "unit_id", false, "UNIT_ID");
        public final static Property Type = new Property(4, int.class, "type", false, "TYPE");
        public final static Property Offset = new Property(5, int.class, "offset", false, "OFFSET");
        public final static Property Length = new Property(6, int.class, "length", false, "LENGTH");
        public final static Property Unit = new Property(7, String.class, "unit", false, "UNIT");
        public final static Property Kind = new Property(8, int.class, "kind", false, "KIND");
        public final static Property Max = new Property(9, float.class, "max", false, "MAX");
        public final static Property Min = new Property(10, float.class, "min", false, "MIN");
        public final static Property Scale = new Property(11, int.class, "scale", false, "SCALE");
    };


    public dataattrDao(DaoConfig config) {
        super(config);
    }
    
    public dataattrDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATAATTR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: data_id
                "\"NAME\" TEXT," + // 1: name
                "\"CLASS1\" INTEGER NOT NULL ," + // 2: class1
                "\"UNIT_ID\" INTEGER NOT NULL ," + // 3: unit_id
                "\"TYPE\" INTEGER NOT NULL ," + // 4: type
                "\"OFFSET\" INTEGER NOT NULL ," + // 5: offset
                "\"LENGTH\" INTEGER NOT NULL ," + // 6: length
                "\"UNIT\" TEXT," + // 7: unit
                "\"KIND\" INTEGER NOT NULL ," + // 8: kind
                "\"MAX\" REAL NOT NULL ," + // 9: max
                "\"MIN\" REAL NOT NULL ," + // 10: min
                "\"SCALE\" INTEGER NOT NULL );"); // 11: scale
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATAATTR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, dataattr entity) {
        stmt.clearBindings();
 
        Long data_id = entity.getData_id();
        if (data_id != null) {
            stmt.bindLong(1, data_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getClass1());
        stmt.bindLong(4, entity.getUnit_id());
        stmt.bindLong(5, entity.getType());
        stmt.bindLong(6, entity.getOffset());
        stmt.bindLong(7, entity.getLength());
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(8, unit);
        }
        stmt.bindLong(9, entity.getKind());
        stmt.bindDouble(10, entity.getMax());
        stmt.bindDouble(11, entity.getMin());
        stmt.bindLong(12, entity.getScale());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, dataattr entity) {
        stmt.clearBindings();
 
        Long data_id = entity.getData_id();
        if (data_id != null) {
            stmt.bindLong(1, data_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getClass1());
        stmt.bindLong(4, entity.getUnit_id());
        stmt.bindLong(5, entity.getType());
        stmt.bindLong(6, entity.getOffset());
        stmt.bindLong(7, entity.getLength());
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(8, unit);
        }
        stmt.bindLong(9, entity.getKind());
        stmt.bindDouble(10, entity.getMax());
        stmt.bindDouble(11, entity.getMin());
        stmt.bindLong(12, entity.getScale());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public dataattr readEntity(Cursor cursor, int offset) {
        dataattr entity = new dataattr( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // data_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // class1
            cursor.getInt(offset + 3), // unit_id
            cursor.getInt(offset + 4), // type
            cursor.getInt(offset + 5), // offset
            cursor.getInt(offset + 6), // length
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // unit
            cursor.getInt(offset + 8), // kind
            cursor.getFloat(offset + 9), // max
            cursor.getFloat(offset + 10), // min
            cursor.getInt(offset + 11) // scale
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, dataattr entity, int offset) {
        entity.setData_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setClass1(cursor.getInt(offset + 2));
        entity.setUnit_id(cursor.getInt(offset + 3));
        entity.setType(cursor.getInt(offset + 4));
        entity.setOffset(cursor.getInt(offset + 5));
        entity.setLength(cursor.getInt(offset + 6));
        entity.setUnit(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setKind(cursor.getInt(offset + 8));
        entity.setMax(cursor.getFloat(offset + 9));
        entity.setMin(cursor.getFloat(offset + 10));
        entity.setScale(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(dataattr entity, long rowId) {
        entity.setData_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(dataattr entity) {
        if(entity != null) {
            return entity.getData_id();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
