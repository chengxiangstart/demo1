package com.example.zzj.geendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.zzj.entity.dllalg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DLLALG".
*/
public class dllalgDao extends AbstractDao<dllalg, Long> {

    public static final String TABLENAME = "DLLALG";

    /**
     * Properties of entity dllalg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Lib_id = new Property(0, Long.class, "lib_id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Version = new Property(2, String.class, "version", false, "VERSION");
        public final static Property Url = new Property(3, String.class, "url", false, "URL");
        public final static Property Uptime = new Property(4, String.class, "uptime", false, "UPTIME");
        public final static Property Note = new Property(5, String.class, "note", false, "NOTE");
        public final static Property Usable = new Property(6, int.class, "usable", false, "USABLE");
    };


    public dllalgDao(DaoConfig config) {
        super(config);
    }
    
    public dllalgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DLLALG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: lib_id
                "\"NAME\" TEXT," + // 1: name
                "\"VERSION\" TEXT," + // 2: version
                "\"URL\" TEXT," + // 3: url
                "\"UPTIME\" TEXT," + // 4: uptime
                "\"NOTE\" TEXT," + // 5: note
                "\"USABLE\" INTEGER NOT NULL );"); // 6: usable
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DLLALG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, dllalg entity) {
        stmt.clearBindings();
 
        Long lib_id = entity.getLib_id();
        if (lib_id != null) {
            stmt.bindLong(1, lib_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(3, version);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(4, url);
        }
 
        String uptime = entity.getUptime();
        if (uptime != null) {
            stmt.bindString(5, uptime);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(6, note);
        }
        stmt.bindLong(7, entity.getUsable());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, dllalg entity) {
        stmt.clearBindings();
 
        Long lib_id = entity.getLib_id();
        if (lib_id != null) {
            stmt.bindLong(1, lib_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(3, version);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(4, url);
        }
 
        String uptime = entity.getUptime();
        if (uptime != null) {
            stmt.bindString(5, uptime);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(6, note);
        }
        stmt.bindLong(7, entity.getUsable());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public dllalg readEntity(Cursor cursor, int offset) {
        dllalg entity = new dllalg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // lib_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // version
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // uptime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // note
            cursor.getInt(offset + 6) // usable
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, dllalg entity, int offset) {
        entity.setLib_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVersion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUptime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNote(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUsable(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(dllalg entity, long rowId) {
        entity.setLib_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(dllalg entity) {
        if(entity != null) {
            return entity.getLib_id();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
