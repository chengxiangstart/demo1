package com.example.zzj.geendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.zzj.entity.alarminfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALARMINFO".
*/
public class alarminfoDao extends AbstractDao<alarminfo, Long> {

    public static final String TABLENAME = "ALARMINFO";

    /**
     * Properties of entity alarminfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Alarm_id = new Property(0, Long.class, "alarm_id", true, "_id");
        public final static Property Level = new Property(1, int.class, "level", false, "LEVEL");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property Note = new Property(3, String.class, "note", false, "NOTE");
    };


    public alarminfoDao(DaoConfig config) {
        super(config);
    }
    
    public alarminfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALARMINFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: alarm_id
                "\"LEVEL\" INTEGER NOT NULL ," + // 1: level
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"NOTE\" TEXT);"); // 3: note
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALARMINFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, alarminfo entity) {
        stmt.clearBindings();
 
        Long alarm_id = entity.getAlarm_id();
        if (alarm_id != null) {
            stmt.bindLong(1, alarm_id);
        }
        stmt.bindLong(2, entity.getLevel());
        stmt.bindLong(3, entity.getType());
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(4, note);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, alarminfo entity) {
        stmt.clearBindings();
 
        Long alarm_id = entity.getAlarm_id();
        if (alarm_id != null) {
            stmt.bindLong(1, alarm_id);
        }
        stmt.bindLong(2, entity.getLevel());
        stmt.bindLong(3, entity.getType());
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(4, note);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public alarminfo readEntity(Cursor cursor, int offset) {
        alarminfo entity = new alarminfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // alarm_id
            cursor.getInt(offset + 1), // level
            cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // note
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, alarminfo entity, int offset) {
        entity.setAlarm_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLevel(cursor.getInt(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setNote(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(alarminfo entity, long rowId) {
        entity.setAlarm_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(alarminfo entity) {
        if(entity != null) {
            return entity.getAlarm_id();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
