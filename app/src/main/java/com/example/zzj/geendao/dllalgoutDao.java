package com.example.zzj.geendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.zzj.entity.dllalgout;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DLLALGOUT".
*/
public class dllalgoutDao extends AbstractDao<dllalgout, Void> {

    public static final String TABLENAME = "DLLALGOUT";

    /**
     * Properties of entity dllalgout.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Out_id = new Property(0, Long.class, "out_id", false, "OUT_ID");
        public final static Property Fun_id = new Property(1, int.class, "fun_id", false, "FUN_ID");
        public final static Property Data_id = new Property(2, int.class, "data_id", false, "DATA_ID");
        public final static Property Alarm_id = new Property(3, int.class, "alarm_id", false, "ALARM_ID");
    };


    public dllalgoutDao(DaoConfig config) {
        super(config);
    }
    
    public dllalgoutDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DLLALGOUT\" (" + //
                "\"OUT_ID\" INTEGER," + // 0: out_id
                "\"FUN_ID\" INTEGER NOT NULL ," + // 1: fun_id
                "\"DATA_ID\" INTEGER NOT NULL ," + // 2: data_id
                "\"ALARM_ID\" INTEGER NOT NULL );"); // 3: alarm_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DLLALGOUT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, dllalgout entity) {
        stmt.clearBindings();
 
        Long out_id = entity.getOut_id();
        if (out_id != null) {
            stmt.bindLong(1, out_id);
        }
        stmt.bindLong(2, entity.getFun_id());
        stmt.bindLong(3, entity.getData_id());
        stmt.bindLong(4, entity.getAlarm_id());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, dllalgout entity) {
        stmt.clearBindings();
 
        Long out_id = entity.getOut_id();
        if (out_id != null) {
            stmt.bindLong(1, out_id);
        }
        stmt.bindLong(2, entity.getFun_id());
        stmt.bindLong(3, entity.getData_id());
        stmt.bindLong(4, entity.getAlarm_id());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public dllalgout readEntity(Cursor cursor, int offset) {
        dllalgout entity = new dllalgout( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // out_id
            cursor.getInt(offset + 1), // fun_id
            cursor.getInt(offset + 2), // data_id
            cursor.getInt(offset + 3) // alarm_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, dllalgout entity, int offset) {
        entity.setOut_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFun_id(cursor.getInt(offset + 1));
        entity.setData_id(cursor.getInt(offset + 2));
        entity.setAlarm_id(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(dllalgout entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(dllalgout entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
