package com.example.zzj.geendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.zzj.entity.dllalgin;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DLLALGIN".
*/
public class dllalginDao extends AbstractDao<dllalgin, Long> {

    public static final String TABLENAME = "DLLALGIN";

    /**
     * Properties of entity dllalgin.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property In_id = new Property(0, Long.class, "in_id", true, "_id");
        public final static Property Fun_id = new Property(1, int.class, "fun_id", false, "FUN_ID");
        public final static Property Data_id = new Property(2, int.class, "data_id", false, "DATA_ID");
        public final static Property Repeatm = new Property(3, int.class, "repeatm", false, "REPEATM");
    };


    public dllalginDao(DaoConfig config) {
        super(config);
    }
    
    public dllalginDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DLLALGIN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: in_id
                "\"FUN_ID\" INTEGER NOT NULL ," + // 1: fun_id
                "\"DATA_ID\" INTEGER NOT NULL ," + // 2: data_id
                "\"REPEATM\" INTEGER NOT NULL );"); // 3: repeatm
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DLLALGIN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, dllalgin entity) {
        stmt.clearBindings();
 
        Long in_id = entity.getIn_id();
        if (in_id != null) {
            stmt.bindLong(1, in_id);
        }
        stmt.bindLong(2, entity.getFun_id());
        stmt.bindLong(3, entity.getData_id());
        stmt.bindLong(4, entity.getRepeatm());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, dllalgin entity) {
        stmt.clearBindings();
 
        Long in_id = entity.getIn_id();
        if (in_id != null) {
            stmt.bindLong(1, in_id);
        }
        stmt.bindLong(2, entity.getFun_id());
        stmt.bindLong(3, entity.getData_id());
        stmt.bindLong(4, entity.getRepeatm());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public dllalgin readEntity(Cursor cursor, int offset) {
        dllalgin entity = new dllalgin( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // in_id
            cursor.getInt(offset + 1), // fun_id
            cursor.getInt(offset + 2), // data_id
            cursor.getInt(offset + 3) // repeatm
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, dllalgin entity, int offset) {
        entity.setIn_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFun_id(cursor.getInt(offset + 1));
        entity.setData_id(cursor.getInt(offset + 2));
        entity.setRepeatm(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(dllalgin entity, long rowId) {
        entity.setIn_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(dllalgin entity) {
        if(entity != null) {
            return entity.getIn_id();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
